{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar bases = require('./util/bases.js');\n\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n\n  return base.decoder.decode(`${base.prefix}${string}`);\n}\n\nexports.fromString = fromString;","map":{"version":3,"sources":["/Users/untitled/meta-multi-sig-v2/node_modules/uint8arrays/cjs/src/from-string.js"],"names":["Object","defineProperty","exports","value","bases","require","asUint8array","fromString","string","encoding","base","Error","globalThis","Buffer","from","asUint8Array","decoder","decode","prefix"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AAEA,SAASE,UAAT,CAAoBC,MAApB,EAA4BC,QAAQ,GAAG,MAAvC,EAA+C;AAC7C,QAAMC,IAAI,GAAGN,KAAK,CAACK,QAAD,CAAlB;;AACA,MAAI,CAACC,IAAL,EAAW;AACT,UAAM,IAAIC,KAAJ,CAAW,yBAAyBF,QAAU,GAA9C,CAAN;AACD;;AACD,MAAI,CAACA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAArC,KAAiDG,UAAU,CAACC,MAAX,IAAqB,IAAtE,IAA8ED,UAAU,CAACC,MAAX,CAAkBC,IAAlB,IAA0B,IAA5G,EAAkH;AAChH,WAAOR,YAAY,CAACS,YAAb,CAA0BH,UAAU,CAACC,MAAX,CAAkBC,IAAlB,CAAuBN,MAAvB,EAA+B,OAA/B,CAA1B,CAAP;AACD;;AACD,SAAOE,IAAI,CAACM,OAAL,CAAaC,MAAb,CAAqB,GAAGP,IAAI,CAACQ,MAAQ,GAAGV,MAAQ,EAAhD,CAAP;AACD;;AAEDN,OAAO,CAACK,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bases = require('./util/bases.js');\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}\n\nexports.fromString = fromString;\n"]},"metadata":{},"sourceType":"script"}