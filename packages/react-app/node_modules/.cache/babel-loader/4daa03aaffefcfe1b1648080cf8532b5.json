{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar varint$1 = require('../vendor/varint.js');\n\nvar decode = function decode(data) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var code = varint$1.decode(data, offset);\n  return [code, varint$1.decode.bytes];\n};\n\nvar encodeTo = function encodeTo(int, target) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  varint$1.encode(int, target, offset);\n  return target;\n};\n\nvar encodingLength = function encodingLength(int) {\n  return varint$1.encodingLength(int);\n};\n\nexports.decode = decode;\nexports.encodeTo = encodeTo;\nexports.encodingLength = encodingLength;","map":{"version":3,"sources":["/Users/untitled/meta-multi-sig-v2/node_modules/multiformats/cjs/src/varint.js"],"names":["Object","defineProperty","exports","value","varint$1","require","decode","data","offset","code","bytes","encodeTo","int","target","encode","encodingLength"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAsB;AAAA,MAAfC,MAAe,uEAAN,CAAM;AACnC,MAAMC,IAAI,GAAGL,QAAQ,CAACE,MAAT,CAAgBC,IAAhB,EAAsBC,MAAtB,CAAb;AACA,SAAO,CACLC,IADK,EAELL,QAAQ,CAACE,MAAT,CAAgBI,KAFX,CAAP;AAID,CAND;;AAOA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,MAAN,EAA6B;AAAA,MAAfL,MAAe,uEAAN,CAAM;AAC5CJ,EAAAA,QAAQ,CAACU,MAAT,CAAgBF,GAAhB,EAAqBC,MAArB,EAA6BL,MAA7B;AACA,SAAOK,MAAP;AACD,CAHD;;AAIA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAH,GAAG,EAAI;AAC5B,SAAOR,QAAQ,CAACW,cAAT,CAAwBH,GAAxB,CAAP;AACD,CAFD;;AAIAV,OAAO,CAACI,MAAR,GAAiBA,MAAjB;AACAJ,OAAO,CAACS,QAAR,GAAmBA,QAAnB;AACAT,OAAO,CAACa,cAAR,GAAyBA,cAAzB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint$1 = require('../vendor/varint.js');\n\nconst decode = (data, offset = 0) => {\n  const code = varint$1.decode(data, offset);\n  return [\n    code,\n    varint$1.decode.bytes\n  ];\n};\nconst encodeTo = (int, target, offset = 0) => {\n  varint$1.encode(int, target, offset);\n  return target;\n};\nconst encodingLength = int => {\n  return varint$1.encodingLength(int);\n};\n\nexports.decode = decode;\nexports.encodeTo = encodeTo;\nexports.encodingLength = encodingLength;\n"]},"metadata":{},"sourceType":"script"}