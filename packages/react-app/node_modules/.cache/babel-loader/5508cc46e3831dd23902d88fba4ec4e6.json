{"ast":null,"code":"import _regeneratorRuntime from\"/Users/untitled/meta-multi-sig-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/untitled/meta-multi-sig-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _asyncIterator from\"/Users/untitled/meta-multi-sig-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator\";import{create}from\"ipfs-http-client\";import{BufferList}from\"bl\";export var ipfs=create({host:\"ipfs.infura.io\",port:\"5001\",protocol:\"https\"});export function addToIPFS(_x){return _addToIPFS.apply(this,arguments);}function _addToIPFS(){_addToIPFS=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(file){var fileAdded;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return ipfs.add(file);case 2:fileAdded=_context.sent;return _context.abrupt(\"return\",fileAdded);case 4:case\"end\":return _context.stop();}}},_callee);}));return _addToIPFS.apply(this,arguments);}export function urlFromCID(cid){return\"https://ipfs.infura.io/ipfs/\".concat(cid);}export function getFromIPFS(_x2){return _getFromIPFS.apply(this,arguments);}function _getFromIPFS(){_getFromIPFS=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(hashToGet){var _iteratorNormalCompletion,_didIteratorError,_iteratorError,_iterator,_step,_value,file,content;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_iteratorNormalCompletion=true;_didIteratorError=false;_context2.prev=2;_iterator=_asyncIterator(ipfs.cat(hashToGet));case 4:_context2.next=6;return _iterator.next();case 6:_step=_context2.sent;_iteratorNormalCompletion=_step.done;_context2.next=10;return _step.value;case 10:_value=_context2.sent;if(_iteratorNormalCompletion){_context2.next=18;break;}file=_value;content=new BufferList(file).toString();return _context2.abrupt(\"return\",content);case 15:_iteratorNormalCompletion=true;_context2.next=4;break;case 18:_context2.next=24;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](2);_didIteratorError=true;_iteratorError=_context2.t0;case 24:_context2.prev=24;_context2.prev=25;if(!(!_iteratorNormalCompletion&&_iterator.return!=null)){_context2.next=29;break;}_context2.next=29;return _iterator.return();case 29:_context2.prev=29;if(!_didIteratorError){_context2.next=32;break;}throw _iteratorError;case 32:return _context2.finish(29);case 33:return _context2.finish(24);case 34:case\"end\":return _context2.stop();}}},_callee2,null,[[2,20,24,34],[25,,29,33]]);}));return _getFromIPFS.apply(this,arguments);}","map":{"version":3,"sources":["/Users/untitled/meta-multi-sig-v2/packages/react-app/src/helpers/ipfs.js"],"names":["create","BufferList","ipfs","host","port","protocol","addToIPFS","file","add","fileAdded","urlFromCID","cid","getFromIPFS","hashToGet","cat","content","toString"],"mappings":"qcAAA,OAASA,MAAT,KAAuB,kBAAvB,CACA,OAASC,UAAT,KAA2B,IAA3B,CACA,MAAO,IAAMC,CAAAA,IAAI,CAAGF,MAAM,CAAC,CAAEG,IAAI,CAAE,gBAAR,CAA0BC,IAAI,CAAE,MAAhC,CAAwCC,QAAQ,CAAE,OAAlD,CAAD,CAAnB,CAEP,eAAsBC,CAAAA,SAAtB,8C,yFAAO,iBAAyBC,IAAzB,sJACmBL,CAAAA,IAAI,CAACM,GAAL,CAASD,IAAT,CADnB,QACCE,SADD,+CAGEA,SAHF,wD,4CAMP,MAAO,SAASC,CAAAA,UAAT,CAAoBC,GAApB,CAAyB,CAC9B,4CAAsCA,GAAtC,EACD,CAED,eAAsBC,CAAAA,WAAtB,iD,6FAAO,kBAA2BC,SAA3B,0TACoBX,IAAI,CAACY,GAAL,CAASD,SAAT,CADpB,6OACYN,IADZ,QAEGQ,OAFH,CAEa,GAAId,CAAAA,UAAJ,CAAeM,IAAf,EAAqBS,QAArB,EAFb,kCAIID,OAJJ,2nB","sourcesContent":["import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}