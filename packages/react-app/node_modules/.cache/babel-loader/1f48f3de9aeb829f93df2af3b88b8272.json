{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar alloc = require('./alloc.js');\n\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n\n  const output = alloc.allocUnsafe(length);\n  let offset = 0;\n\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return asUint8array.asUint8Array(output);\n}\n\nexports.concat = concat;","map":{"version":3,"sources":["/Users/untitled/meta-multi-sig-v2/node_modules/uint8arrays/cjs/src/concat.js"],"names":["Object","defineProperty","exports","value","alloc","require","asUint8array","concat","arrays","length","reduce","acc","curr","output","allocUnsafe","offset","arr","set","asUint8Array"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AAEA,SAASE,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAI,CAACA,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACH,MAAxC,EAAgD,CAAhD,CAAT;AACD;;AACD,QAAMI,MAAM,GAAGT,KAAK,CAACU,WAAN,CAAkBL,MAAlB,CAAf;AACA,MAAIM,MAAM,GAAG,CAAb;;AACA,OAAK,MAAMC,GAAX,IAAkBR,MAAlB,EAA0B;AACxBK,IAAAA,MAAM,CAACI,GAAP,CAAWD,GAAX,EAAgBD,MAAhB;AACAA,IAAAA,MAAM,IAAIC,GAAG,CAACP,MAAd;AACD;;AACD,SAAOH,YAAY,CAACY,YAAb,CAA0BL,MAA1B,CAAP;AACD;;AAEDX,OAAO,CAACK,MAAR,GAAiBA,MAAjB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar alloc = require('./alloc.js');\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = alloc.allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8array.asUint8Array(output);\n}\n\nexports.concat = concat;\n"]},"metadata":{},"sourceType":"script"}