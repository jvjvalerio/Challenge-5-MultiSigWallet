{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction alloc() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.alloc(size));\n  }\n\n  return new Uint8Array(size);\n}\n\nfunction allocUnsafe() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n\n  return new Uint8Array(size);\n}\n\nexports.alloc = alloc;\nexports.allocUnsafe = allocUnsafe;","map":{"version":3,"sources":["/Users/untitled/meta-multi-sig-v2/node_modules/uint8arrays/cjs/src/alloc.js"],"names":["Object","defineProperty","exports","value","asUint8array","require","alloc","size","globalThis","Buffer","asUint8Array","Uint8Array","allocUnsafe"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,yBAAD,CAA1B;;AAEA,SAASC,KAAT,GAAyB;AAAA,MAAVC,IAAU,uEAAH,CAAG;;AACvB,MAAIC,UAAU,CAACC,MAAX,IAAqB,IAArB,IAA6BD,UAAU,CAACC,MAAX,CAAkBH,KAAlB,IAA2B,IAA5D,EAAkE;AAChE,WAAOF,YAAY,CAACM,YAAb,CAA0BF,UAAU,CAACC,MAAX,CAAkBH,KAAlB,CAAwBC,IAAxB,CAA1B,CAAP;AACD;;AACD,SAAO,IAAII,UAAJ,CAAeJ,IAAf,CAAP;AACD;;AACD,SAASK,WAAT,GAA+B;AAAA,MAAVL,IAAU,uEAAH,CAAG;;AAC7B,MAAIC,UAAU,CAACC,MAAX,IAAqB,IAArB,IAA6BD,UAAU,CAACC,MAAX,CAAkBG,WAAlB,IAAiC,IAAlE,EAAwE;AACtE,WAAOR,YAAY,CAACM,YAAb,CAA0BF,UAAU,CAACC,MAAX,CAAkBG,WAAlB,CAA8BL,IAA9B,CAA1B,CAAP;AACD;;AACD,SAAO,IAAII,UAAJ,CAAeJ,IAAf,CAAP;AACD;;AAEDL,OAAO,CAACI,KAAR,GAAgBA,KAAhB;AACAJ,OAAO,CAACU,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nfunction allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}\n\nexports.alloc = alloc;\nexports.allocUnsafe = allocUnsafe;\n"]},"metadata":{},"sourceType":"script"}