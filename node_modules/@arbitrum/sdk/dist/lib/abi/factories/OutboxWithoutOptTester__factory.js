"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutboxWithoutOptTester__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "AlreadyInit",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "AlreadySpent",
        type: "error",
    },
    {
        inputs: [],
        name: "BridgeCallFailed",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "actualLength",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxProofLength",
                type: "uint256",
            },
        ],
        name: "MerkleProofTooLong",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxIndex",
                type: "uint256",
            },
        ],
        name: "PathNotMinimal",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "proofLength",
                type: "uint256",
            },
        ],
        name: "ProofTooLong",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
            },
        ],
        name: "UnknownRoot",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "l2Sender",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "zero",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "transactionIndex",
                type: "uint256",
            },
        ],
        name: "OutBoxTransactionExecuted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "outputRoot",
                type: "bytes32",
            },
        ],
        name: "SendRootUpdated",
        type: "event",
    },
    {
        inputs: [],
        name: "OUTBOX_VERSION",
        outputs: [
            {
                internalType: "uint128",
                name: "",
                type: "uint128",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "bridge",
        outputs: [
            {
                internalType: "contract IBridge",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "l2Sender",
                type: "address",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "l2Block",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "l1Block",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "l2Timestamp",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "calculateItemHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "proof",
                type: "bytes32[]",
            },
            {
                internalType: "uint256",
                name: "path",
                type: "uint256",
            },
            {
                internalType: "bytes32",
                name: "item",
                type: "bytes32",
            },
        ],
        name: "calculateMerkleRoot",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "proof",
                type: "bytes32[]",
            },
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "l2Sender",
                type: "address",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "l2Block",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "l1Block",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "l2Timestamp",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "executeTransaction",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IBridge",
                name: "_bridge",
                type: "address",
            },
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "l2ToL1BatchNum",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "l2ToL1Block",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "l2ToL1EthBlock",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "l2ToL1OutputId",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "l2ToL1Sender",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "l2ToL1Timestamp",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "rollup",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        name: "roots",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "spent",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "l2BlockHash",
                type: "bytes32",
            },
        ],
        name: "updateSendRoot",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60a06040523060805234801561001457600080fd5b5060805161106461002d600039600050506110646000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063a04cee6011610087578063a04cee601461018f578063ae6dead7146101a2578063b0f30537146101c2578063c4d66de8146101d3578063c75184df146101e6578063cb23bcb514610206578063d5b5cc2314610219578063e78cea921461024c57600080fd5b80627436d3146100e457806308635a951461010a578063119852711461011f578063465477901461012657806372f2a8c71461013757806380648b021461013f5780638515bc6a146101645780639f0c04bf1461017c575b600080fd5b6100f76100f2366004610a0f565b61025f565b6040519081526020015b60405180910390f35b61011d610118366004610b36565b61029c565b005b60006100f7565b6004546001600160801b03166100f7565b6006546100f7565b6007546001600160a01b03165b6040516001600160a01b039091168152602001610101565b600454600160801b90046001600160801b03166100f7565b6100f761018a366004610c2b565b6105de565b61011d61019d366004610cba565b610623565b6100f76101b0366004610cdc565b60036020526000908152604090205481565b6005546001600160801b03166100f7565b61011d6101e1366004610cf5565b610662565b6101ee600281565b6040516001600160801b039091168152602001610101565b60005461014c906001600160a01b031681565b61023c610227366004610cdc565b60026020526000908152604090205460ff1681565b6040519015158152602001610101565b60015461014c906001600160a01b031681565b600061029484848460405160200161027991815260200190565b6040516020818303038152906040528051906020012061073b565b949350505050565b6000806102af8a8a8a8a8a8a8a8a6105de565b90506102f18d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508f92508591506107fd9050565b915060008a6001600160a01b03168a6001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648e60405161033a91815260200190565b60405180910390a450600060046040518060a00160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518060a00160405280896001600160801b03168152602001886001600160801b03168152602001876001600160801b031681526020018381526020018b6001600160a01b0316815250600460008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160010160006101000a8154816001600160801b0302191690836001600160801b031602179055506060820151816002015560808201518160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050610569898686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090092505050565b805160208201516001600160801b03918216600160801b91831691909102176004556040820151600580546001600160801b03191691909216179055606081015160065560800151600780546001600160a01b0319166001600160a01b03909216919091179055505050505050505050505050565b600088888888888888886040516020016105ff989796959493929190610d19565b60405160208183030381529060405280519060200120905098975050505050505050565b60008281526003602052604080822083905551829184917fb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f67489190a35050565b6001546001600160a01b03161561068c57604051633bcd329760e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190610d72565b600080546001600160a01b0319166001600160a01b039290921691909117905550565b825160009061010081111561077357604051637ed6198f60e11b81526004810182905261010060248201526044015b60405180910390fd5b8260005b828110156107f357600087828151811061079357610793610d8f565b602002602001015190506002876107aa9190610dbb565b6107c2578260005280602052604060002092506107d2565b8060005282602052604060002092505b6107dd600288610de5565b96505080806107eb90610df9565b915050610777565b5095945050505050565b600061010084511061082757835160405163ab6a068360e01b815260040161076a91815260200190565b8351610834906002610efa565b831061086b5782845160026108499190610efa565b604051630b8a724b60e01b81526004810192909252602482015260440161076a565b600061087885858561025f565b6000818152600360205260409020549091506108aa576040516310e61af960e31b81526004810182905260240161076a565b60008481526002602052604090205460ff16156108dd57604051639715b8d360e01b81526004810185905260240161076a565b50506000828152600260205260409020805460ff19166001179055819392505050565b600154604051639e5d4c4960e01b815260009182916001600160a01b0390911690639e5d4c499061093990889088908890600401610f36565b600060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098f9190810190610f7f565b91509150816109c1578051156109a85780518082602001fd5b604051631bb7daad60e11b815260040160405180910390fd5b5050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0757610a076109c8565b604052919050565b600080600060608486031215610a2457600080fd5b833567ffffffffffffffff80821115610a3c57600080fd5b818601915086601f830112610a5057600080fd5b8135602082821115610a6457610a646109c8565b8160051b9250610a758184016109de565b828152928401810192818101908a851115610a8f57600080fd5b948201945b84861015610aad57853582529482019490820190610a94565b9a918901359950506040909701359695505050505050565b6001600160a01b0381168114610ada57600080fd5b50565b8035610ae881610ac5565b919050565b60008083601f840112610aff57600080fd5b50813567ffffffffffffffff811115610b1757600080fd5b602083019150836020828501011115610b2f57600080fd5b9250929050565b60008060008060008060008060008060006101208c8e031215610b5857600080fd5b8b3567ffffffffffffffff80821115610b7057600080fd5b818e0191508e601f830112610b8457600080fd5b813581811115610b9357600080fd5b8f60208260051b8501011115610ba857600080fd5b60208381019e50909c508e01359a50610bc360408f01610add565b9950610bd160608f01610add565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e0135915080821115610c0457600080fd5b50610c118e828f01610aed565b915080935050809150509295989b509295989b9093969950565b60008060008060008060008060e0898b031215610c4757600080fd5b8835610c5281610ac5565b97506020890135610c6281610ac5565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff811115610c9a57600080fd5b610ca68b828c01610aed565b999c989b5096995094979396929594505050565b60008060408385031215610ccd57600080fd5b50508035926020909101359150565b600060208284031215610cee57600080fd5b5035919050565b600060208284031215610d0757600080fd5b8135610d1281610ac5565b9392505050565b60006bffffffffffffffffffffffff19808b60601b168352808a60601b16601484015250876028830152866048830152856068830152846088830152828460a8840137506000910160a801908152979650505050505050565b600060208284031215610d8457600080fd5b8151610d1281610ac5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082610dca57610dca610da5565b500690565b634e487b7160e01b600052601160045260246000fd5b600082610df457610df4610da5565b500490565b6000600019821415610e0d57610e0d610dcf565b5060010190565b600181815b80851115610e4f578160001904821115610e3557610e35610dcf565b80851615610e4257918102915b93841c9390800290610e19565b509250929050565b600082610e6657506001610ef4565b81610e7357506000610ef4565b8160018114610e895760028114610e9357610eaf565b6001915050610ef4565b60ff841115610ea457610ea4610dcf565b50506001821b610ef4565b5060208310610133831016604e8410600b8410161715610ed2575081810a610ef4565b610edc8383610e14565b8060001904821115610ef057610ef0610dcf565b0290505b92915050565b6000610d128383610e57565b60005b83811015610f21578181015183820152602001610f09565b83811115610f30576000848401525b50505050565b60018060a01b03841681528260208201526060604082015260008251806060840152610f69816080850160208701610f06565b601f01601f191691909101608001949350505050565b60008060408385031215610f9257600080fd5b82518015158114610fa257600080fd5b602084015190925067ffffffffffffffff80821115610fc057600080fd5b818501915085601f830112610fd457600080fd5b815181811115610fe657610fe66109c8565b610ff9601f8201601f19166020016109de565b915080825286602082850101111561101057600080fd5b611021816020840160208601610f06565b508092505050925092905056fea2646970667358221220fdf85294bff7028bde1b4bf703f91dccbc012efdd03908cd44a8be048d03e62664736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
class OutboxWithoutOptTester__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "OutboxWithoutOptTester";
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.OutboxWithoutOptTester__factory = OutboxWithoutOptTester__factory;
OutboxWithoutOptTester__factory.bytecode = _bytecode;
OutboxWithoutOptTester__factory.abi = _abi;
